import React, { useState, useEffect } from "react";
import {
    Accordion,
    AccordionSummary,
    AccordionDetails,
    Typography,
    Paper,
    Box,
    TextField,
    Button,
    List,
    ListItem,
    ListItemText,
    Divider,
    IconButton, // –î–æ–±–∞–≤–ª—è–µ–º IconButton –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–±—Ä–æ—Å–∞
    InputAdornment, // –î–æ–±–∞–≤–ª—è–µ–º InputAdornment –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –≤–Ω—É—Ç—Ä–∏ TextField
} from "@mui/material";
import ExpandMoreIcon from "@mui/icons-material/ExpandMore";
import CloseIcon from "@mui/icons-material/Close"; // –ò–∫–æ–Ω–∫–∞ –∫—Ä–µ—Å—Ç–∏–∫–∞
import { createWebSocketConnection } from "../services/api";

const ChatWithCandidates = ({ candidates }) => {
    const [expanded, setExpanded] = useState(null); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞
    const [messages, setMessages] = useState({}); // –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    const [newMessage, setNewMessage] = useState(""); // –¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    const [ws, setWs] = useState(null); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è WebSocket
    const [searchQuery, setSearchQuery] = useState(""); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è/–∑–∞–∫—Ä—ã—Ç–∏—è –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞
    const handleChange = (panel, candidateId) => (event, isExpanded) => {
        setExpanded(isExpanded ? `panel-${candidateId}` : null);
        if (isExpanded) {
            fetchIncomingMessages(candidateId); // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ WebSocket
    const fetchIncomingMessages = async (candidateId) => {
        try {
            console.log(`üì© –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ ${candidateId}...`);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –∏—Å—Ç–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ WebSocket
            if (ws && ws.readyState === WebSocket.OPEN) {
                ws.send(
                    JSON.stringify({
                        type: "load_history",
                        candidateId: candidateId,
                    })
                );
            } else {
                console.error("‚ùå WebSocket –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç");
            }
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π:", error);
        }
    };

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    useEffect(() => {
        const userId = 1; // ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        const handleMessage = (message) => {
            console.log("–ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket:", message);
    
            if (message.type === "history") {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ messages —Å –∏—Å—Ç–æ—Ä–∏–µ–π –ø–µ—Ä–µ–ø–∏—Å–∫–∏
                setMessages((prevMessages) => ({
                    ...prevMessages,
                    [message.candidateId]: message.history.map((msg) => ({
                        ...msg,
                        sender: msg.sender_id === userId ? "admin" : "candidate",
                    })),
                }));
            } else if (message.type === "message") {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ messages —Å –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                setMessages((prevMessages) => {
                    const updatedMessages = { ...prevMessages };
    
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—É–¥–∞ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç receiver_id –∏–ª–∏ sender_id)
                    const chatId = message.receiver_id === userId ? message.sender_id : message.receiver_id;
    
                    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç
                    updatedMessages[chatId] = [
                        ...(updatedMessages[chatId] || []),
                        {
                            id: Date.now(), // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
                            text: message.text,
                            timestamp: message.timestamp,
                            sender: message.sender_id === userId ? "admin" : "candidate",
                        },
                    ];
    
                    return updatedMessages;
                });
            }
        };
    
        const socket = createWebSocketConnection(userId, handleMessage);
        setWs(socket);
    
        // –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        return () => {
            if (socket && socket.readyState === WebSocket.OPEN) {
                socket.close();
            }
        };
    }, []);

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket
    const handleSendMessage = (receiverId) => {
      if (!newMessage.trim()) return;
  
      try {
          const messageData = {
              type: "message",
              receiver_id: parseInt(receiverId, 10),
              text: newMessage,
          };
  
          console.log("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket:", messageData);
  
          if (ws && ws.readyState === WebSocket.OPEN) {
              ws.send(JSON.stringify(messageData));
          } else {
              console.error("‚ùå WebSocket –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç");
          }
  
          // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          setMessages((prevMessages) => ({
              ...prevMessages,
              [receiverId]: [
                  ...(prevMessages[receiverId] || []),
                  {
                      id: Date.now(),
                      text: newMessage,
                      timestamp: new Date().toISOString(),
                      sender: "admin",
                  },
              ],
          }));
  
          setNewMessage("");
      } catch (error) {
          console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket:", error);
      }
  };

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ —Ñ–∞–º–∏–ª–∏–∏
    const filteredCandidates = candidates.filter((candidate) =>
        candidate.full_name.toLowerCase().includes(searchQuery.toLowerCase())
    );

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    const handleClearSearch = () => {
        setSearchQuery("");
    };

    return (
        <Paper
            sx={{
                p: 2,
                flex: 1,
                overflowY: "auto",
                "::-webkit-scrollbar": { width: "6px" },
                "::-webkit-scrollbar-thumb": {
                    backgroundColor: "#aaa",
                    borderRadius: "3px",
                },
                borderRadius: "8px",
                boxShadow: "0px 4px 10px rgba(0, 0, 0, 0.1)",
                backgroundColor: "#fff",
            }}
        >
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
            <Typography variant="h6" sx={{ mb: 2, textAlign: "center", color: "#333" }}>
                üìß –ß–∞—Ç —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏
            </Typography>

            {/* –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞ —Å –∫–Ω–æ–ø–∫–æ–π —Å–±—Ä–æ—Å–∞ */}
            <TextField
                fullWidth
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                placeholder="–ü–æ–∏—Å–∫ –ø–æ —Ñ–∞–º–∏–ª–∏–∏..."
                sx={{ mb: 2 }}
                InputProps={{
                    endAdornment: (
                        <InputAdornment position="end">
                            {searchQuery && ( // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–µ—Å—Ç–∏–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
                                <IconButton onClick={handleClearSearch} size="small">
                                    <CloseIcon />
                                </IconButton>
                            )}
                        </InputAdornment>
                    ),
                }}
            />

            {/* –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç—ã, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏—Ö —Å–ø–∏—Å–æ–∫ */}
            {filteredCandidates.length > 0 ? (
                filteredCandidates.map((candidate) => (
                    <Accordion
                        key={candidate.user_id}
                        sx={{ mb: 2, maxHeight: "400px", overflowY: "auto" }} // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É
                        expanded={expanded === `panel-${candidate.user_id}`}
                        onChange={handleChange(`panel-${candidate.user_id}`, candidate.user_id)}
                    >
                        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞ */}
                        <AccordionSummary expandIcon={<ExpandMoreIcon />}>
                            <Box sx={{ display: "flex", alignItems: "center" }}>
                                {candidate.photo_url ? (
                                    <img
                                        src={candidate.photo_url}
                                        alt={candidate.full_name}
                                        onError={(e) => (e.target.style.display = "none")}
                                        style={{
                                            width: "60px",
                                            height: "60px",
                                            borderRadius: "50%",
                                            objectFit: "cover",
                                            marginRight: "15px",
                                            boxShadow: "0 2px 4px rgba(0,0,0,0.2)",
                                        }}
                                    />
                                ) : (
                                    <Box
                                        sx={{
                                            width: "60px",
                                            height: "60px",
                                            borderRadius: "50%",
                                            backgroundColor: "#ccc",
                                            
                                        }}
                                    />
                                )}
                                <Typography variant="h6">{candidate.full_name}</Typography>
                            </Box>
                        </AccordionSummary>

                        {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞ */}
                        <AccordionDetails>
                            <Box sx={{ display: "flex", flexDirection: "column", gap: 1 }}>
                                {/* –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π */}
                                <List>
    {messages[candidate.user_id]?.length > 0 ? (
        messages[candidate.user_id].map((message) => (
            <React.Fragment key={message.id}>
                {/* –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ */}
                {message.sender === "admin" && (
                    <ListItem
                        key={message.id}
                        sx={{
                            alignSelf: "flex-end",
                            bgcolor: "#dcf8c6",
                            borderRadius: "10px",
                            maxWidth: "70%",
                            ml: "auto",
                            mr: 0,
                            py: 0.5, // –£–º–µ–Ω—å—à–∞–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã
                            px: 1.5, // –£–º–µ–Ω—å—à–∞–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã
                            my: 0.5, // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                            
                        }}
                    >
                        <ListItemText
                            primary={message.text}
                            primaryTypographyProps={{ style: { fontSize: "0.875rem" } }} // –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞
                            secondary={`–í—ã - ${new Date(message.timestamp).toLocaleTimeString()}`}
                            secondaryTypographyProps={{ style: { fontSize: "0.75rem" } }} // –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
                        />
                    </ListItem>
                )}

                {/* –°–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ */}
                {message.sender === "candidate" && (
                    <ListItem
                        key={message.id}
                        sx={{
                            alignSelf: "flex-start",
                            bgcolor: "#f0f0f0",
                            borderRadius: "10px",
                            maxWidth: "70%",
                            ml: 0,
                            mr: "auto",
                            py: 0.5, // –£–º–µ–Ω—å—à–∞–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã
                            px: 1.5, // –£–º–µ–Ω—å—à–∞–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã
                            my: 0.5, // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                            
                        }}
                    >
                        <ListItemText
                            primary={message.text}
                            primaryTypographyProps={{ style: { fontSize: "0.875rem" } }} // –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞
                            secondary={`${candidate.full_name} - ${new Date(message.timestamp).toLocaleTimeString()}`}
                            secondaryTypographyProps={{ style: { fontSize: "0.75rem" } }} // –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
                        />
                    </ListItem>
                )}

                {/* –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ */}
                <Divider key={`divider-${message.id}`} />
            </React.Fragment>
        ))
    ) : (
        <Typography variant="body1" sx={{ textAlign: "center", mt: 2 }}>
            –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
        </Typography>
    )}
</List>

                                {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ –∏ –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ */}
                                <Box sx={{ display: "flex", gap: 1, mt: 2 }}>
                                    <TextField
                                        fullWidth
                                        value={newMessage}
                                        onChange={(e) => setNewMessage(e.target.value)}
                                        onKeyPress={(e) => {
                                            if (e.key === "Enter") {
                                                handleSendMessage(candidate.user_id);
                                            }
                                        }}
                                        placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                                        InputProps={{
                                            style: { fontSize: "1rem" },
                                        }}
                                    />
                                    <Button
                                        variant="contained"
                                        onClick={() => handleSendMessage(candidate.user_id)}
                                        sx={{ height: "100%", fontSize: "1rem" }}
                                    >
                                        –û—Ç–ø—Ä–∞–≤–∏—Ç—å
                                    </Button>
                                </Box>
                            </Box>
                        </AccordionDetails>
                    </Accordion>
                ))
            ) : (
                <Typography variant="h6" sx={{ textAlign: "center", mt: 4 }}>
                    –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö
                </Typography>
            )}
        </Paper>
    );
};

export default ChatWithCandidates;